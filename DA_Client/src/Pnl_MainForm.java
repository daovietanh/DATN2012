
import java.awt.Component;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import vn.com.dva.entities.GroupUser;
import vn.com.dva.entities.Users;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Pnl_MainForm.java
 *
 * Created on 01-05-2012, 21:52:34
 */
/**
 *
 * @author VietAnh
 */
public class Pnl_MainForm extends javax.swing.JPanel {

    private final ListenRoomSocket RoomChat;
    DefaultListModel model = new DefaultListModel();

    /** Creates new form Pnl_MainForm */
    public Pnl_MainForm() {
        initComponents();
        RoomChat = new ListenRoomSocket(Session.user.getUserName());
        RoomChat.setTextPanelView(View);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        View = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextPane();
        btnGui = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listOnline = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resource/banner.jpg"))); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Chat"));

        View.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                ViewCaretUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(View);

        chat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                chatKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(chat);

        btnGui.setText("Gửi");
        btnGui.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 542, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                        .addComponent(btnGui, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 268, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addComponent(btnGui, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Các thành viên đang online"));

        listOnline.setModel(model);
        jScrollPane3.setViewportView(listOnline);

        jButton1.setText("Cấm Chat");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Hủy Cấm");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(19, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 818, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuiActionPerformed
        // TODO add your handling code here:
        if (!isChat()) {
            JOptionPane.showMessageDialog(null, "Bạn đã bị admin cấm giao tiếp !");
            return;
        }
        String Message = chat.getText();
        RoomChat.writeMessage_on_panelView("Me" + ": " + Message + "\n");
        chat.setText("");
        try {
            RoomChat.Chatting(Message + "\n");
        } catch (Exception e) {
        }
    }//GEN-LAST:event_btnGuiActionPerformed
    // Kiểm tra tài khoản có được chat trước khi chat

    private boolean isChat() {
        List<Long> lstOnline = Session.lstOnline;
        List<Boolean> lstIsChat = Session.lstIsChat;
        int i = lstOnline.indexOf(Session.user.getUserID());
        if (i == -1) {
            return false;
        }
        return lstIsChat.get(i);
    }
    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        loadListOnline();
    }//GEN-LAST:event_formComponentShown

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        if (listOnline.isSelectionEmpty()) {
            return;
        }
        try {
            Users user = Cl_Client.c.getUserByUserName(listOnline.getSelectedValue().toString());
            Long id = user.getUserID();
            if (!Calculate.isBanChat(Session.user.getUserID(), id)) {
                JOptionPane.showMessageDialog(null, " Bạn không có quyền cấm chat thành viên này !");
                return;
            }
            Cl_Client.c.banChat(id);
            JOptionPane.showMessageDialog(null, " Tài khoản " + user + " đã bị cấm giao tiếp !");
        } catch (RemoteException ex) {
            return;
        }
        loadListOnline();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if (listOnline.isSelectionEmpty()) {
            return;
        }
        try {
            int i = listOnline.getSelectedIndex();
            Long id = Session.lstOnline.get(i);
            if (!Calculate.isBanChat(Session.user.getUserID(), id)) {
                JOptionPane.showMessageDialog(null, " Bạn không có quyền cho phép thành viên này giao tiếp !");
                return;
            }
            Cl_Client.c.allowChat(id);
            JOptionPane.showMessageDialog(null, " Tài khoản " + Cl_Client.c.getUserByID(id) + " được phép giao tiếp !");
        } catch (RemoteException ex) {
            return;
        }
        loadListOnline();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void chatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_chatKeyTyped
        // TODO add your handling code here:
        if (evt.getKeyChar() == '\n') {
            if (!Calculate.isChat()) {
                JOptionPane.showMessageDialog(null, " Tài khoản bị cấm giao tiếp !");
                return;
            }
            if (evt.isControlDown()) {
                chat.setText(chat.getText() + "\n");
            } else {
                String Message = chat.getText();
                RoomChat.writeMessage_on_panelView("Me" + ": " + Message);
                chat.setText("");
                try {
                    RoomChat.Chatting(Message + "\n");
                } catch (Exception e) {
                }
            }
        }
    }//GEN-LAST:event_chatKeyTyped

    private void ViewCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_ViewCaretUpdate
        // TODO add your handling code here:
        loadListOnline();
    }//GEN-LAST:event_ViewCaretUpdate
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane View;
    private javax.swing.JButton btnGui;
    private javax.swing.JTextPane chat;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList listOnline;
    // End of variables declaration//GEN-END:variables

    private void loadListOnline() {
        ImageIcon icon;
        Map<Object, Icon> icons = new HashMap<Object, Icon>();

        try {
            // TODO add your handling code here:
            Session.lstOnline = Cl_Client.c.getAllUserOnline();
            Session.lstIsChat = Cl_Client.c.getAllIsChat();
        } catch (RemoteException ex) {
            Logger.getLogger(Pnl_MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        List<Long> lstOnline = Session.lstOnline;
        List<Boolean> lstIsChat = Session.lstIsChat;
        model.clear();
        if (lstOnline.isEmpty()) {
            return;
        }
        for (int i = 0; i < lstOnline.size(); i++) {
            String s = "";
            int value = 0;
            try {
                Users u = Cl_Client.c.getUserByID(lstOnline.get(i));
                s = u.getUserName();
                GroupUser gr = Cl_Client.c.getGroupByID(u.getGroupUserID());
                if (gr.getAccessManager() == Session.ADMIN) {
                    value = Session.ADMIN_ICON;
                } else if (gr.getAccessManager() == Session.TEACHER) {
                    value = Session.TEACHER_ICON;
                } else {
                    value = Session.STUDENT_ICON;
                }
            } catch (RemoteException ex) {
                return;
            }
            if (!lstIsChat.get(i)) {
                value = Session.BAN_ICON ;
            }
            icon = getImageIcon(value);


            icons.put(s, icon);
            model.addElement(s);
        }

        listOnline.setCellRenderer(new IconListRenderer(icons));
    }

    private ImageIcon getImageIcon(int value) {
        ImageIcon iconAdmin = new ImageIcon("src//resource//admin.gif", "name1");
        ImageIcon iconTeacher = new ImageIcon("src//resource//teacher.gif", "name2");
        ImageIcon iconStudent = new ImageIcon("src//resource//member.gif", "name3");
        ImageIcon iconBan = new ImageIcon("src//resource//ban.gif", "name4");

        if (value == Session.ADMIN_ICON) {
            return iconAdmin;
        }
        if (value == Session.TEACHER_ICON) {
            return iconTeacher;
        }
        if (value == Session.ADMIN_ICON) {
            return iconStudent;
        }
        if (value == Session.BAN_ICON) {
            return iconBan;
        }
        return iconStudent;
    }

    public class IconListRenderer
            extends DefaultListCellRenderer {

        private Map<Object, Icon> icons = null;

        public IconListRenderer(Map<Object, Icon> icons) {
            this.icons = icons;
        }

        @Override
        public Component getListCellRendererComponent(
                JList list, Object value, int index,
                boolean isSelected, boolean cellHasFocus) {

            // Get the renderer component from parent class

            JLabel label =
                    (JLabel) super.getListCellRendererComponent(list,
                    value, index, isSelected, cellHasFocus);

            // Get icon to use for the list item value

            Icon icon = icons.get(value);

            // Set icon to display for value

            label.setIcon(icon);
            return label;
        }
    }
}
