
import java.awt.Component;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JList;
import vn.com.dva.entities.GroupUser;
import vn.com.dva.entities.Users;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Frm_Online.java
 *
 * Created on 02-05-2012, 02:03:27
 */
/**
 *
 * @author VietAnh
 */
public class Frm_Online extends javax.swing.JFrame {

    DefaultListModel model = new DefaultListModel();

    /** Creates new form Frm_Online */
    public Frm_Online() {
        initComponents();
        loadListOnline();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        listOnline = new javax.swing.JList();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.GridLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Các thành viên đang online"));
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        listOnline.setModel(model);
        jScrollPane3.setViewportView(listOnline);

        jButton1.setText("Đóng");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jButton1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1))
        );

        jScrollPane1.setViewportView(jPanel2);

        getContentPane().add(jScrollPane1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

    }//GEN-LAST:event_jButton1ActionPerformed
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JList listOnline;
    // End of variables declaration//GEN-END:variables

    private void loadListOnline() {        
        ImageIcon icon ;
        Map<Object, Icon> icons = new HashMap<Object, Icon>();
                        
        try {
            // TODO add your handling code here:
            Session.lstOnline = Cl_Client.c.getAllUserOnline();
            Session.lstIsChat = Cl_Client.c.getAllIsChat();
        } catch (RemoteException ex) {
            Logger.getLogger(Pnl_MainForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        List<Long> lstOnline = Session.lstOnline;
        List<Boolean> lstIsChat = Session.lstIsChat;
        model.clear();
        if (lstOnline.isEmpty()) {
            return;
        }
        for (int i = 0; i < lstOnline.size(); i++) {           
            String s = "";
            int value = 0;
            try {
                Users u  = Cl_Client.c.getUserByID(lstOnline.get(i)) ;
                s = u.getUserName();
                GroupUser gr = Cl_Client.c.getGroupByID(u.getGroupUserID());
                if (gr.getAccessManager() == Session.ADMIN ) value = Session.ADMIN_ICON;
                else if (gr.getAccessManager() == Session.TEACHER ) value = Session.TEACHER_ICON;
                else value = Session.STUDENT_ICON;
            } catch (RemoteException ex) {
                return;
            }
            if (!lstIsChat.get(i)) {
                value = Session.BAN_ICON;
            }
            icon = getImageIcon(value);
            
            
            icons.put(s,icon);
            model.addElement(s);
        }
        
        listOnline.setCellRenderer(new IconListRenderer(icons));
    }
    
      
    private ImageIcon getImageIcon(int value){
        ImageIcon iconAdmin = new ImageIcon("src//resource//admin.gif","name1");
        ImageIcon iconTeacher = new ImageIcon("src//resource//teacher.gif","name2");
        ImageIcon iconStudent = new ImageIcon("src//resource//member.gif","name3");
        ImageIcon iconBan = new ImageIcon("src//resource//ban.gif","name4");
        
        if (value == Session.ADMIN_ICON ) return iconAdmin;
        if (value == Session.TEACHER_ICON ) return iconTeacher;
        if (value == Session.ADMIN_ICON ) return iconStudent;
        if (value == Session.BAN_ICON ) return iconBan;
        return iconStudent;
    }
    
    
    public class IconListRenderer
	extends DefaultListCellRenderer {

	private Map<Object, Icon> icons = null;

	public IconListRenderer(Map<Object, Icon> icons) {
		this.icons = icons;
	}

	@Override
	public Component getListCellRendererComponent(
		JList list, Object value, int index,
		boolean isSelected, boolean cellHasFocus) {

		// Get the renderer component from parent class

		JLabel label =
			(JLabel) super.getListCellRendererComponent(list,
				value, index, isSelected, cellHasFocus);

		// Get icon to use for the list item value

		Icon icon = icons.get(value);

		// Set icon to display for value

		label.setIcon(icon);
		return label;
	}
    }
    
}
